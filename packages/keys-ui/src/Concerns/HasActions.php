<?php

namespace Keys\UI\Concerns;

/**
 * Trait HasActions
 *
 * Provides action handling functionality for Keys UI components.
 * Eliminates code duplication across form components by centralizing:
 * - Action existence checks
 * - Auto-generated actions (clearable, copyable, etc.)
 * - Action data transformation for Button components
 * - Action size computation
 *
 * Used by: Input, Textarea, Checkbox, Radio, Toggle, and other components
 */
trait HasActions
{
    /**
     * Check if component has configured actions.
     * Returns true if either auto-generated or custom actions exist.
     *
     * @return bool
     */
    public function hasActions(): bool
    {
        return !empty($this->configuredActions());
    }

    /**
     * Get auto-generated actions based on component properties.
     * Override this method in components that support auto-generation (Input, Textarea).
     * Default implementation returns empty array (Checkbox, Radio, Toggle).
     *
     * @return array
     */
    protected function getAutoGeneratedActions(): array
    {
        return [];
    }

    /**
     * Get final configured actions (auto-generated + custom merged).
     * Components with auto-generation override getAutoGeneratedActions().
     * Components without auto-generation just use custom actions array.
     *
     * @return array
     */
    public function configuredActions(): array
    {
        return array_merge(
            $this->getAutoGeneratedActions(),
            $this->actions ?? []
        );
    }

    /**
     * Transform actions into Button component format with multi-state support.
     * Processes both auto-generated and custom actions into consistent structure.
     *
     * @return array
     */
    public function getComputedActionData(): array
    {
        $actions = [];

        foreach ($this->configuredActions() as $action) {
            $actionType = $action['type'] ?? $action['action'] ?? 'custom';

            $computedAction = [
                'type' => $actionType,
                'data_action' => $actionType,
                'icon' => $action['icon'] ?? 'heroicon-o-cursor-arrow-rays',
                'data_icon_default' => $action['icon'] ?? 'heroicon-o-cursor-arrow-rays',
                'label' => $action['label'] ?? $action['tooltip'] ?? 'Action',
                'icon_toggle' => $action['icon_toggle'] ?? null,
                'icon_success' => $action['icon_success'] ?? null,
                'label_toggle' => $action['label_toggle'] ?? null,
                'label_success' => $action['label_success'] ?? null,
                'data_url' => $action['url'] ?? null,
                'data_icon_toggle' => $action['icon_toggle'] ?? null,
                'data_icon_success' => $action['icon_success'] ?? null,
                'data_label_toggle' => $action['label_toggle'] ?? null,
                'data_label_success' => $action['label_success'] ?? null,
                'is_multi_state' => isset($action['icon_toggle']) || isset($action['icon_success']),
            ];

            $actions[] = $computedAction;
        }

        return $actions;
    }

    /**
     * Get computed action size for Button components.
     * Maps action size to valid Button size variants.
     * Used by: Checkbox, Radio, Toggle components.
     *
     * @return string
     */
    public function getComputedActionSize(): string
    {
        return match ($this->actionSize ?? 'xs') {
            'xs' => 'xs',
            'sm' => 'sm',
            'md' => 'md',
            default => 'xs'
        };
    }
}
